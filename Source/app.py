import pandas as pd
import os
import altair as alt
import streamlit as st
import plotly.express as px
from streamlit_option_menu import option_menu

color_palette = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',  '#e377c2', '#211951','#7f7f7f', '#bcbd22', '#17becf']
 
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded")

# Custom CSS for better styling
st.markdown("""
    <style>
    .reportview-container {
        background: #0e1117;
    }
    .sidebar .sidebar-content {
        background: #262730;
    }
    .Widget>label {
        color: #fafafa;
        font-family: 'Roboto', sans-serif;
    }
    .stTextInput>div>div>input {
        color: #fafafa;
    }
    .stSelectbox>div>div>select {
        color: #fafafa;
    }
    .stTitle {
        font-weight: bold;
        color: #ff4b4b;
    }
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');
    body {
        font-family: 'Roboto', sans-serif;
    }
    .stApp {
        background-color: #41644A; 
    }
    .page-title {
        font-family: 'Arial', sans-serif;  
        font-size: 36px;                   
        font-weight: bold;                
        color: #fdf5e6;                    
        text-align: center;               
        margin-top: 20px;                  
        margin-bottom: 20px;              
        border-bottom: 2px solid #3498db;  
        padding-bottom: 10px;             
    }
    .home-page-desc {
        font-family: 'Arial', sans-serif;  
        font-size: 18px;                   
        color: white;     
        text-wrap: balance;               
        text-align: left;               
        margin-top: 20px;                  
        margin-bottom: 20px;  
        font-weight: bold;           
    }

    .custom1 {
            background-color: #528B8B;
            padding: 20px;
    }
    .custom2 {
            background-color: #4682B4;
            padding: 20px;
    }
    .custom3 {
            background-color: #CD5C5C;
            padding: 20px;
    }
    </style>
    """, unsafe_allow_html=True)

# Enable dark theme for Altair charts
alt.themes.enable("dark")

DATAPATH = os.path.join(os.path.dirname(__file__), 'data', 'country_comparison_large_dataset_vn.csv')
df = pd.read_csv(DATAPATH)

with st.sidebar:
    selected_option = option_menu(
        menu_title="T√°c v·ª•",  # Required
        options=["Trang ch√≠nh", "Kinh t·∫ø v√† d√¢n s·ªë", "X√£ h·ªôi v√† s·ª©c kh·ªèe", "NƒÉng l∆∞·ª£ng, m√¥i tr∆∞·ªùng v√† c∆° s·ªü h·∫° t·∫ßng"], 
        icons=["house-door-fill", "bar-chart-line-fill", "person-heart", "lightning-fill"], 
        menu_icon="cast", 
        default_index=0, 
        styles={
            "container": {"padding": "5!important", "background-color": "#0e1117"},
            "icon": {"font-size": "25px", "color": "#ff4b4b"},
            "nav-link": {
                "font-size": "17px", 
                "font-family": "Open Sans, sans-serif", 
                "text-align": "left", 
                "margin": "0px",
            },
            "nav-link-selected": {
                "background-color": "#ffc757", 
                "font-family": "Open Sans, sans-serif",
                "font-size": "18px",
                "font-weight": "bold",
                "color": "#0e1117",
            },
        },
    )
    st.session_state.selected_tab = selected_option

# Updated chart layout configuration with better contrast
def get_chart_layout():
    return {
        'plot_bgcolor': 'rgba(253, 245, 230, 0.7)',  # Custom plot background color (light)
        'paper_bgcolor': 'rgba(253, 245, 230, 1)',   # Custom chart background color
        'title': "", 
        'xaxis_title_font': dict(color="#0d0d0d", weight="bold"),
        'yaxis_title_font': dict(color="#0d0d0d", weight="bold"),
        'xaxis': dict(
            showgrid=True, 
            gridcolor='rgba(0, 0, 0, 0.5)',  # Light grid lines
            tickfont=dict(color='#696969'),  # Tick font color
            title_font=dict(color='#696969')  # Axis title font color
        ),
        'yaxis': dict(
            showgrid=True, 
            gridcolor='rgba(0, 0, 0, 0.5)',  # Light grid lines
            tickfont=dict(color='#696969'),  # Tick font color
            title_font=dict(color='#696969')  # Axis title font color
        ),
        'legend': dict(
            title=dict(
                text='Qu·ªëc gia',  # Legend title
                font=dict(color='#696969', weight="bold")  # Legend title styling
            ),
            font=dict(color='#696969'),  # Legend text color
            bgcolor="rgba(253, 245, 230, 0.7)"  # Legend background color
        ),
        
        'font': dict(
            color='black'  # General text color
        )
    }

if selected_option == "Trang ch√≠nh":
    # CSS styles for the main page
    st.markdown(
        """
        <style>
        .main {
            padding: 2rem;
            background-color: ##f0f2f6;
        }
        .title {
            font-size: 3rem;
            font-weight: bold;
            color: #FFBD73;
            text-align: center;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .subtitle {
            font-size: 1.5rem;
            color: #FFBD73;
            text-align: center;
            font-weight: bold;
            margin-bottom: 2rem;
        }
        .section-title {
            font-size: 2rem;
            font-weight: bold;
            color: #96EFFF;
            margin-top: 2rem;
            margin-bottom: 1rem;
            text-align: center;
        }
        .metric-card {
            border: 2px solid #1f77b4;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            margin: 10px;
            background-color: #fdf5e6;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }
        .metric-value {
            font-size: 28px;
            font-weight: bold;
            color: #15B392;
        }
        .metric-label {
            font-size: 16px;
            color: #555;
            margin-top: 5px;
        }
        .info-box {
            background-color: #fdf5e6;
            border-radius: 10px;
            padding: 20px;
            margin: 10px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100px;
        }
        .info-box h3 {
            color: #1f77b4;
            margin-bottom: 10px;
        }
        .info-box p {
            font-size: 20px;
            color: #333;
            line-height: 1.6;
            font-weight: bold;
            text-wrap: balance;
            text-align: center;
            margin: 0;
        }
        .info-item {
            font-size: 18px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
            border-radius: 10px;
            background-color: #fdf5e6;
            font-weight: bold;
            margin-bottom: 10px;
            text-align: center;
        }
        .tab-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
            gap: 20px;
        }
        .tab-description {
            flex-basis: calc(50% - 10px);
            background-color: #fdf5e6;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .tab-description1 {
            flex-basis: calc(50%);
            background-color: #fdf5e6;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .tab-description:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        .tab-description1:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        .tab-description1 .tab-title {
            font-weight: bold;
            color: #15B392;
            font-size: 1.5rem;
            text-align: center;
            margin-bottom: 10px;
        }
        .tab-description1 p {
            font-size: 16px;
            color: #333;
            text-align: center;
            text-wrap: balance;
            justify-content: center;
            align-items: center;
            line-height: 1.6;
            font-weight: bold;
        }
        .tab-title {
            font-weight: bold;
            color: #15B392;
            font-size: 1.5rem;
            text-align: center;
            margin-bottom: 10px;
        }
        .tab-description p {
            font-size: 16px;
            color: #333;
            text-align: center;
            text-wrap: balance;
            justify-content: center;
            align-items: center;
            line-height: 1.6;
            font-weight: bold;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.markdown("<h1 class='title'>B·∫£ng Ph√¢n T√≠ch D·ªØ Li·ªáu Gi·ªØa C√°c Qu·ªëc Gia</h1>", unsafe_allow_html=True)
    # Dataset overview
    st.markdown("<h2 class='section-title'>T·ªïng Quan B·ªô D·ªØ Li·ªáu</h2>", unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{len(df['Qu·ªëc gia'].unique())}</div>
                <div class="metric-label" style="font-weight: bold">Qu·ªëc gia</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    with col2:
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{df['NƒÉm'].min()} - {df['NƒÉm'].max()}</div>
                <div class="metric-label" style="font-weight: bold">Ph·∫°m vi NƒÉm</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    with col3:
        st.markdown(
            f"""
            <div class="metric-card">
                <div class="metric-value">{df.size:,}</div>
                <div class="metric-label" style="font-weight: bold">ƒêi·ªÉm D·ªØ li·ªáu</div>
            </div>
            """,
            unsafe_allow_html=True
        )

    # Dataset purpose
    st.markdown("<h2 class='section-title'>M·ª•c ƒê√≠ch Ph√¢n T√≠ch B·ªô D·ªØ Li·ªáu</h2>", unsafe_allow_html=True)
    st.markdown(
        """
        <div class="info-box">
            <p>Vi·ªác ph√¢n t√≠ch b·ªô d·ªØ li·ªáu n√†y cung c·∫•p m·ªôt c√°i nh√¨n to√†n di·ªán v·ªÅ c√°c ch·ªâ s·ªë c·ªßa c√°c qu·ªëc gia,
            bao g·ªìm nhi·ªÅu lƒ©nh v·ª±c nh∆∞ l√† kinh t·∫ø, d√¢n s·ªë, y t·∫ø,...
            </p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    col_purpose1, col_purpose2 = st.columns(2)
    with col_purpose1:
        st.markdown("<div class='info-item'>Hi·ªÉu r√µ h∆°n v·ªÅ xu h∆∞·ªõng ph√°t tri·ªÉn to√†n c·∫ßu</div>", unsafe_allow_html=True)
        st.markdown("<div class='info-item'>So s√°nh c√°c n∆∞·ªõc Trung Qu·ªëc, ·∫§n ƒê·ªô, Canada, √öc, M·ªπ, Nga</div>", unsafe_allow_html=True)
    with col_purpose2:
        st.markdown("<div class='info-item'>Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa c√°c ch·ªâ s·ªë kh√°c nhau</div>", unsafe_allow_html=True)
        st.markdown("<div class='info-item'>Cung c·∫•p c∆° s·ªü d·ªØ li·ªáu cho vi·ªác ho·∫°ch ƒë·ªãnh ch√≠nh s√°ch v√† nghi√™n c·ª©u</div>", unsafe_allow_html=True)

    # Explore Topics
    st.markdown("<h2 class='section-title'>Kh√°m Ph√° C√°c Ch·ªß ƒê·ªÅ</h2>", unsafe_allow_html=True)
    st.markdown(
        """
        <div class="tab-container">
            <div class="tab-description"">
                <h3 class="tab-title">Kinh t·∫ø v√† d√¢n s·ªë</h3>
                <p>Ph√¢n t√≠ch tƒÉng tr∆∞·ªüng kinh t·∫ø, GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi, bi·∫øn ƒë·ªông d√¢n s·ªë v√† c√°c m·ªëi li√™n h·ªá gi·ªØa c√°c ch·ªâ s·ªë</p>
            </div>
            <div class="tab-description">
                <h3 class="tab-title">X√£ h·ªôi v√† s·ª©c kh·ªèe</h3>
                <p>ƒê√°nh gi√° tu·ªïi th·ªç, h·ªá th·ªëng y t·∫ø v√† ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng</p>
            </div>
            <div class="tab-description1" >
                <h3 class="tab-title">NƒÉng l∆∞·ª£ng, m√¥i tr∆∞·ªùng v√† c∆° s·ªü h·∫° t·∫ßng</h3>
                <p>Theo d√µi ti√™u d√πng nƒÉng l∆∞·ª£ng, t·ª∑ l·ªá nƒÉng l∆∞·ª£ng t√°i t·∫°o, ph√°t th·∫£i CO2 v√† ph√°t tri·ªÉn b·ªÅn v·ªØng</p>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

elif selected_option == "Kinh t·∫ø v√† d√¢n s·ªë":
    st.markdown('''<div class="page-title">Kinh t·∫ø & D√¢n s·ªë</div>''', unsafe_allow_html=True)
    
    # Improved filters layout
    slt1, slt2 = st.columns((1,1))
    min_year, max_year = int(df['NƒÉm'].min()), int(df['NƒÉm'].max())

    with slt1:
        selected_countries = st.multiselect("Ch·ªçn c√°c qu·ªëc gia ƒë·ªÉ so s√°nh", options=df['Qu·ªëc gia'].unique(), default=df['Qu·ªëc gia'].unique()[:], key="Qu·ªëc gia_selection")
    with slt2:
        selected_year = st.selectbox("Ch·ªçn nƒÉm c·ª• th·ªÉ", options=range(min_year, max_year + 1), index=max_year - min_year, key="NƒÉm_selection")

    selected_year_range = st.slider("Ch·ªçn kho·∫£ng nƒÉm", min_value=min_year, max_value=max_year, value=(min_year, max_year), key="NƒÉm_range")
    # Filter the dataset based on selections
    # Filter the dataset based on selections
    filtered_df = df[(df['NƒÉm'] >= selected_year_range[0]) & 
                     (df['NƒÉm'] <= selected_year_range[1])]
    # Filter specific countries
    filtered_df_countries =  df[(df['Qu·ªëc gia'].isin(selected_countries)) & 
                     (df['NƒÉm'] >= selected_year_range[0]) & 
                     (df['NƒÉm'] <= selected_year_range[1])]
    # Filter specific NƒÉm
    filtered_df_NƒÉm = df[df['NƒÉm'] == selected_year]

    filtered_df_countries_NƒÉm = filtered_df_NƒÉm[(filtered_df_NƒÉm['Qu·ªëc gia'].isin(selected_countries))]

    
    col1, col2, col3 = st.columns([1, 2, 2])
    
    with col1:
        st.markdown('''<div class="custom3" style="height: 525px;">
                        <h6><center>GDP V√Ä D√ÇN S·ªê</center></h6>
                        <p>GDP v√† d√¢n s·ªë l√† hai ch·ªâ s·ªë thi·∫øt y·∫øu, cung c·∫•p c√°i nh√¨n to√†n di·ªán v·ªÅ ti·ªÅm l·ª±c kinh t·∫ø v√† quy m√¥ d√¢n s·ªë, ph√°t tri·ªÉn c·ªßa m·ªôt qu·ªëc gia.</p>
                    </div>
                    ''', unsafe_allow_html=True)
    with col2:
        title = f"GDP C·ª¶A C√ÅC QU·ªêC GIA T·ª™ NƒÇM {selected_year_range[0]} ƒê·∫æN {selected_year_range[1]}"
        st.markdown(f'''<div class="custom3", style="height: 75px;">
                            <center><strong>{title}</strong></center>
                        </div>
                    ''', unsafe_allow_html=True)
        if selected_countries:
            gdp_data = filtered_df_countries
            
            fig = px.line(gdp_data, 
                        x='NƒÉm', 
                        y='GDP (ngh√¨n t·ª∑ USD)', 
                        color='Qu·ªëc gia',
                        markers=True,
                        color_discrete_sequence=color_palette)

            # Configure the logarithmic y-axis with better settings
            fig.update_yaxes(
                type="log",
                title='GDP (Ngh√¨n t·ª∑ USD)',
                ticktext=['1', '2', '3', '4', '5', '10', '20', '30'],
                tickvals=[1, 2, 3, 4, 5, 10, 20, 30],
                range=[0, 1.5],  # log10 range for better visualization
                showgrid=True,
                gridwidth=1,
                gridcolor='rgba(128, 128, 128, 0.15)',
                showline=True,
                linewidth=1,
                linecolor='rgba(128, 128, 128, 0.4)'
            )

            # Improve the x-axis
            fig.update_xaxes(
                title='NƒÉm',
                dtick=5,  # Show NƒÉm marks every 5 NƒÉms
                gridcolor='rgba(128, 128, 128, 0.15)',
                gridwidth=1,
                showline=True,
                linewidth=1,
                linecolor='rgba(128, 128, 128, 0.4)'
            )

            # Get the base layout and update it with additional settings
            layout = get_chart_layout()
            layout.update(
                height=450,
                margin=dict(l=60, r=30, t=30, b=50),
                hovermode='x unified',
            )

            # Update layout with merged settings
            fig.update_layout(**layout)

            # Improve marker and line styling
            fig.update_traces(
                marker=dict(
                    size=6,  # Slightly smaller markers
                    line=dict(width=1, color='DarkSlateGrey')
                ),
                line=dict(width=1),  # Slightly thinner lines
                hovertemplate='%{y:.1f} Ngh√¨n T·ª∑ USD<extra></extra>'  # Simpler hover template
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            # Display the chart
            st.plotly_chart(fig, use_container_width=True)
    with col3:
        title = f'D√ÇN S·ªê C·ª¶A C√ÅC QU·ªêC GIA T·ª™ NƒÇM {selected_year_range[0]} ƒê·∫æN {selected_year_range[1]}'
        st.markdown(f'''<div class="custom3", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)

        if selected_countries:
            pop_data = filtered_df_countries
            
            fig = px.line(pop_data,
                        x='NƒÉm',
                        y='D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)',
                        color='Qu·ªëc gia', 
                        markers=True,
                        color_discrete_sequence=color_palette)

            # Configure the logarithmic y-axis with better settings
            fig.update_yaxes(
                type="log",
                title='D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)',
                ticktext=['10', '20', '50', '100', '200', '500', '1000', '2000'],
                tickvals=[10, 20, 50, 100, 200, 500, 1000, 2000],
                range=[1, 3.3],  # log10 of 10 to 2000
                showgrid=True,
                gridwidth=1,
                gridcolor='rgba(128, 128, 128, 0.2)',
            )

            # Improve the x-axis
            fig.update_xaxes(
                title='NƒÉm',
                dtick=5,  # Show NƒÉm marks every 5 NƒÉms
                gridcolor='rgba(128, 128, 128, 0.2)',
                gridwidth=1,
            )

            # Get the base layout and update it with additional settings
            layout = get_chart_layout()
            layout.update(
                margin=dict(l=60, r=30, t=50, b=50),
                hovermode='x unified'
            )

            # Update layout with merged settings
            fig.update_layout(**layout)

            # Improve marker and line styling
            fig.update_traces(
                marker=dict(
                    size=6,
                    line=dict(width=1, color='DarkSlateGrey')
                ),
                line=dict(width=1),
                hovertemplate='%{y:.0f} Tri·ªáu Ng∆∞·ªùi<extra></extra>'
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            # Display the chart
            st.plotly_chart(fig, use_container_width=True)
    
    # Second row - Population metrics
    col4, col5, col6 = st.columns([1, 2, 2])
    
    with col4:
        st.markdown('''<div class="custom2", style="height: 525px;">
                        <h6><center>C√ÅC M·ªêI T∆Ø∆†NG QUAN KINH T·∫æ V√Ä D√ÇN S·ªê</center></h6>
                        <p>GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi v√† t·ª∑ l·ªá tham gia lao ƒë·ªông l√† hai y·∫øu t·ªë then ch·ªët, kh√¥ng ch·ªâ ph·∫£n √°nh m·ª©c ƒë·ªô ph√°t tri·ªÉn kinh t·∫ø m√† c√≤n th·ªÉ hi·ªán s·ª©c kh·ªèe v√† quy m√¥ c·ªßa th·ªã tr∆∞·ªùng lao ƒë·ªông trong m·ªôt qu·ªëc gia.</p>
                    ''', unsafe_allow_html=True)
    with col5:
        title = f'D√ÇN S·ªê V√Ä GDP B√åNH QU√ÇN ƒê·∫¶U NG∆Ø·ªúI THEO QUY M√î GDP V√ÄO NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom2", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                     </div>
                    ''', unsafe_allow_html=True)
        if selected_countries:
            pop_gdp_data = filtered_df_countries_NƒÉm
            
            fig = px.scatter(pop_gdp_data,
                           x='D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)',
                           y='GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)',
                           size='GDP (ngh√¨n t·ª∑ USD)', 
                           color='Qu·ªëc gia',
                           hover_name='Qu·ªëc gia',
                           size_max=30,
                           color_discrete_sequence=color_palette)
                # Configure the logarithmic y-axis with better settings

            fig.update_layout(
            **get_chart_layout(),
            annotations=[
                dict(
                    xref='paper', yref='paper',
                    x=0.5, y=1.15,  # Position at the top center of the chart
                    showarrow=False,
                    text="K√≠ch th∆∞·ªõc bong b√≥ng bi·ªÉu th·ªã quy m√¥ GDP c·ªßa c√°c qu·ªëc gia",
                    font=dict(size=16, color="DarkSlateGrey")
                )
            ]
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            st.plotly_chart(fig)
    with col6:
        title=f'D√ÇN S·ªê V√Ä T·ª∂ L·ªÜ THAM GIA LAO ƒê·ªòNG THEO QUY M√î GDP V√ÄO NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom2", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                     </div>
                    ''', unsafe_allow_html=True)
        pop_gdp_data = filtered_df_countries_NƒÉm
        
        fig = px.scatter(pop_gdp_data,
                           x='D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)',
                           y='T·ª∑ l·ªá tham gia l·ª±c l∆∞·ª£ng lao ƒë·ªông (%)',
                           size='GDP (ngh√¨n t·ª∑ USD)', 
                           color='Qu·ªëc gia',
                           labels={'D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)': 'D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)',
                                'T·ª∑ l·ªá tham gia l·ª±c l∆∞·ª£ng lao ƒë·ªông (%)': 'T·ª∑ l·ªá tham gia lao ƒë·ªông (%)'},
                           hover_name='Qu·ªëc gia',
                           size_max=30,
                           color_discrete_sequence=color_palette)
        
        fig.update_layout(
            **get_chart_layout(),
            annotations=[
                dict(
                    xref='paper', yref='paper',
                    x=0.5, y=1.15,  # Position at the top center of the chart
                    showarrow=False,
                    text="K√≠ch th∆∞·ªõc bong b√≥ng bi·ªÉu th·ªã quy m√¥ GDP c·ªßa c√°c qu·ªëc gia",
                    font=dict(size=16, color="DarkSlateGrey")
                )
            ]
        )
        fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
        st.plotly_chart(fig)

elif selected_option == "X√£ h·ªôi v√† s·ª©c kh·ªèe":
    st.markdown('''<div class="page-title">X√£ h·ªôi & S·ª©c kho·∫ª</div>''', unsafe_allow_html=True)

        # Improved filters layout
    col1, col2 = st.columns((1,1))
    min_year, max_year = int(df['NƒÉm'].min()), int(df['NƒÉm'].max())

    with col1:
        selected_countries = st.multiselect("Ch·ªçn c√°c qu·ªëc gia ƒë·ªÉ so s√°nh", options=df['Qu·ªëc gia'].unique(), default=df['Qu·ªëc gia'].unique()[:], key="Qu·ªëc gia_selection")
    with col2:
        selected_year = st.selectbox("Ch·ªçn nƒÉm c·ª• th·ªÉ", options=range(min_year, max_year + 1), index=max_year - min_year, key="NƒÉm_selection")

    # Main tab
    col1, col2, col3 = st.columns([1, 2, 2])
    with col1:
        st.markdown('''<div class="custom2", style="height: 525px;">
                        <h6><center>TU·ªîI TH·ªå</center></h6>
                        <p>Tu·ªïi th·ªç qua c√°c nƒÉm c√≥ xu h∆∞·ªõng dao ƒë·ªông xung quanh m·ªëc ban ƒë·∫ßu nƒÉm 2000. 
                           V√† ƒëang c√≥ xu h∆∞·ªõng gi·∫£m d·∫ßn ·ªü nƒÉm 2023.</p>
                        <p>C√°c n∆∞·ªõc c√≥ t·ªâ l·ªá b√°c sƒ© tr√™n b·ªánh nh√¢n v√† chi ti√™u y t·∫ø b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi cao 
                            th∆∞·ªùng c√≥ tu·ªïi th·ªç cao h∆°n c√°c n∆∞·ªõc c√≤n l·∫°i. </p></div>
                    ''', unsafe_allow_html=True)  # Start of the
    with col2:
        title = f'TU·ªîI TH·ªå C·ª¶A C√ÅC QU·ªêC GIA T·ª™ NƒÇM {min_year} ƒê·∫æN {max_year}'
        st.markdown(f'''<div class="custom2", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True) 
        if selected_countries:
            hdi_data = df[
                (df['Qu·ªëc gia'].isin(selected_countries)) & (df['NƒÉm'])
            ][['Qu·ªëc gia', 'NƒÉm', 'Tu·ªïi th·ªç (nƒÉm)']].dropna()
            # Create a line chart for HDI using Plotly
            fig = px.line(hdi_data, x='NƒÉm', y='Tu·ªïi th·ªç (nƒÉm)', color='Qu·ªëc gia', 
                        title="Tu·ªïi th·ªç (nƒÉm) Over NƒÉms by Qu·ªëc gia",
                        labels={'Tu·ªïi th·ªç (nƒÉm)': 'Tu·ªïi th·ªç (NƒÉm)', 'NƒÉm': 'NƒÉm'},
                        color_discrete_sequence=color_palette,
                        markers=True)

                    # Get the base layout and update it with additional settings
            layout = get_chart_layout()
            layout.update(
                margin=dict(l=60, r=30, t=30, b=50),
                hovermode='x unified',
            )

            # Update layout with merged settings
            fig.update_layout(**layout)

            # Improve marker and line styling
            fig.update_traces(
                marker=dict(
                    size=6,  # Slightly smaller markers
                    line=dict(width=1, color='DarkSlateGrey')
                ),
                line=dict(width=1),  # Slightly thinner lines
                
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            st.plotly_chart(fig)
    with col3: 
        title = f'T·ªà L·ªÜ B√ÅC Sƒ®-B·ªÜNH NH√ÇN V√Ä TU·ªîI TH·ªå THEO CHI TI√äU CHƒÇM S√ìC S·ª®C KHO·∫∫ B√åNH QU√ÇN ƒê·∫¶U NG∆Ø·ªúI NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom2", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                     </div>
                    ''', unsafe_allow_html=True)
        
        if selected_countries:
            #Create a bubble chart using Plotly
            fig = px.scatter(df[df["Qu·ªëc gia"].isin(selected_countries) & (df['NƒÉm'] == selected_year)], 
                    x='T·ª∑ l·ªá b√°c sƒ©-b·ªánh nh√¢n', 
                    y='Tu·ªïi th·ªç (nƒÉm)', 
                    size='Chi ti√™u y t·∫ø b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)',  # Bubble size
                    color='Qu·ªëc gia',  # Bubble color
                    title='Life Expectancy vs T·ª∑ l·ªá b√°c sƒ©-b·ªánh nh√¢n (Bubble Chart)',
                    labels={'T·ª∑ l·ªá b√°c sƒ©-b·ªánh nh√¢n': 'T·ªâ l·ªá b√°c sƒ©-b·ªánh nh√¢n',
                            'Tu·ªïi th·ªç (nƒÉm)': 'Tu·ªïi th·ªç (nƒÉm)'},
                    size_max=40,
                    hover_name="Qu·ªëc gia",
                    hover_data=["NƒÉm"],
                    animation_group="Qu·ªëc gia",
                    color_discrete_sequence=color_palette
            )
            layout = get_chart_layout()
            layout.update(
                annotations=[
                dict(
                    xref='paper', yref='paper',
                    x=0.5, y=1.15,  # Position at the top center of the chart
                    showarrow=False,
                    text="K√≠ch th∆∞·ªõc: chi ti√™u y t·∫ø b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi",
                    font=dict(size=16, color="DarkSlateGrey")
                )
            ]
            )
            fig.update_layout(**layout)
            fig.update_traces(
                marker=dict(# Slightly smaller markers
                    line=dict(width=1, color='DarkSlateGrey')
                ),
                line=dict(width=1), 
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            # Show the scatter plot
            st.plotly_chart(fig)
    
    col4, col5, col6 = st.columns([1, 2, 2])
    with col4:
        st.markdown('''<div class="custom3", style="height: 525px;">
                        <h6><center>T·ªà L·ªÜ H·ªò NGH√àO</center></h6>
                        <p>T·ªâ l·ªá h·ªô ngh√®o, t·ªâ l·ªá th·∫•t nghi·ªáp cho m·ª©c ƒë·ªô s·ªëng c·ªßa ng∆∞·ªùi d√¢n, v√† nh·ªØng th√°ch th·ª©c m√† nh√† n∆∞·ªõc ƒëang ph·∫£i ƒë·ªëi m·∫∑t.</p>
                        <p>C√°c n∆∞·ªõc c√≥ GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi cao ch∆∞a ch·∫Øc ƒë√£ c√≥ t·ªâ l·ªá h·ªô ngh√®o th·∫•p nh∆∞: USA, Canada, Australia. 
                        Cho th·∫•y s·ª± ch√™nh l·ªách giai c·∫•p trong c√°c x√£ h·ªôi n√†y l√† v√¥ c√πng l·ªõn.</p></div>
                    ''', unsafe_allow_html=True)
    with col5:
        title = f'T·ªà L·ªÜ H·ªò NGH√àO V√Ä D√ÇN S·ªê C·ª¶A C√ÅC QU·ªêC GIA NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom3", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)
        if selected_countries:
            poverty_data = df[
                (df['Qu·ªëc gia'].isin(selected_countries)) & 
                (df['NƒÉm'] == selected_year) 
                ][['Qu·ªëc gia', 'T·ª∑ l·ªá ngh√®o (%)', 'T·ª∑ l·ªá th·∫•t nghi·ªáp (%)']].dropna()
            poverty_data = poverty_data.sort_values(by='T·ª∑ l·ªá ngh√®o (%)', ascending=True)

            poverty_data = poverty_data.rename(columns={
            'T·ª∑ l·ªá ngh√®o (%)': 'H·ªô ngh√®o', 
            'T·ª∑ l·ªá th·∫•t nghi·ªáp (%)': 'Th·∫•t nghi·ªáp'
            })

            melted_data = pd.melt(poverty_data, 
                      id_vars=['Qu·ªëc gia'], 
                      value_vars=['Th·∫•t nghi·ªáp', 'H·ªô ngh√®o'],
                      var_name='Metric', 
                      value_name='Value (%)')

            # Create the grouped bar chart
            fig = px.bar(melted_data, 
                        x='Qu·ªëc gia', 
                        y='Value (%)', 
                        color='Metric',  # Color by 'Metric'
                        barmode='group',  # Grouped bars
                        labels={
                            'Metric': 'Ch·ªâ s·ªë',
                            'Value (%)': 'T·ªâ l·ªá (%)',
                            'Qu·ªëc gia': 'Qu·ªëc gia',
                        },
                        color_discrete_map={
                            'Th·∫•t nghi·ªáp': color_palette[1],
                            'H·ªô ngh√®o': color_palette[0],  
                        },
                        hover_name = 'Metric',
                        )
            chart_layout = get_chart_layout()
            chart_layout['legend']['title']['text'] = 'Ch·ªâ s·ªë'  
            fig.update_layout(**chart_layout)

            # Show the chart
            st.plotly_chart(fig)
    with col6:
        title = f'T·ªà L·ªÜ H·ªò NGH√àO V√Ä GDP B√åNH QU√ÇN ƒê·∫¶U NG∆Ø·ªúI C·ª¶A C√ÅC QU·ªêC GIA NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom3", style="height: 75px;">
                    <center><strong>{title}</strong></center>
                     </div>
                    ''', unsafe_allow_html=True) 
        
    # Scatter plot for Poverty-Rate vs GDP per Capita
        if selected_countries:
            health_data = df[
                (df['Qu·ªëc gia'].isin(selected_countries)) & 
                (df['T·ª∑ l·ªá ngh√®o (%)'].notna()) & 
                (df['GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)'].notna()) &
                (df['NƒÉm'] == selected_year)
            ][['Qu·ªëc gia', 'T·ª∑ l·ªá ngh√®o (%)', 'GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)']]
            # Create a scatter plot using Plotly
            fig = px.scatter(health_data, x='T·ª∑ l·ªá ngh√®o (%)', y='GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)', 
                        color='Qu·ªëc gia', 
                        title=' T·ª∑ l·ªá ngh√®o (%) vs GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)',
                        labels={'T·ª∑ l·ªá ngh√®o (%)': 'T·ªâ l·ªá h·ªô ngh√®o (%)',
                                'GDP b√¨nh qu√¢n ƒë·∫ßu ng∆∞·ªùi (USD)': 'GDP b√¨nh qu√¢n (in USD)'},
                        color_discrete_sequence=color_palette,
                        size_max = 40)
            
            # Vietnamese translation for the legend title
            fig.update_layout(**get_chart_layout())

            fig.update_traces(
                marker=dict(# Slightly smaller markers
                    size=10,
                    line=dict(width=1, color='DarkSlateGrey')
                ),
                line=dict(width=1), 
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            # Show the scatter plot
            st.plotly_chart(fig) 

elif selected_option == "NƒÉng l∆∞·ª£ng, m√¥i tr∆∞·ªùng v√† c∆° s·ªü h·∫° t·∫ßng":
    st.markdown('''<div class="page-title">NƒÉng l∆∞·ª£ng, M√¥i tr∆∞·ªùng & C∆° s·ªü h·∫° t·∫ßng</div>''', unsafe_allow_html=True)

    # Custom CSS to style column
    st.markdown("""       
        <style>
        .summary1{
            background-color: #528B8B;
            padding: 20px;
        }
        .summary2 {
            background-color: #4682B4;
            padding: 20px;
        }       
        .summary3{
            background-color: #cd5c5c;
            padding: 20px;
        }
        .custom1, .custom2, .custom3 {
            padding: 20px;
            height: 75px; /* Set the fixed height here */
            overflow: hidden; /* Ensures text doesn't overflow */
            text-align: center; /* Center-align the text */
            display: flex;
            justify-content: center;
            align-items: center;
        }
        </style>
    """, unsafe_allow_html=True)

    # Sidebar for Qu·ªëc gia selection
    col1, col2 = st.columns((1,1))
    min_year, max_year = int(df['NƒÉm'].min()), int(df['NƒÉm'].max())

    with col1:
        selected_countries = st.multiselect("Ch·ªçn c√°c qu·ªëc gia ƒë·ªÉ so s√°nh", options=df['Qu·ªëc gia'].unique(), default=df['Qu·ªëc gia'].unique()[:], key="Qu·ªëc gia_selection")
    with col2:
        selected_year = st.selectbox("Ch·ªçn nƒÉm c·ª• th·ªÉ", options=range(min_year, max_year + 1), index=max_year - min_year, key="NƒÉm_selection")

    selected_year_range = st.slider("Ch·ªçn kho·∫£ng nƒÉm", min_value=min_year, max_value=max_year, value=(min_year, max_year), key="NƒÉm_range")
    selected_years = selected_year_range
    selected_year = selected_year
    # Main tab
    col1, col2, col3 = st.columns([1, 2, 2])
    with col1:
        st.markdown('''<div class="summary1", style="height: 525px;">
                        <h6><center>NƒÇNG L∆Ø·ª¢NG</center></h6>
                        <p>M·∫∑c d√π t·ªïng l∆∞·ª£ng ti√™u th·ª• nƒÉng l∆∞·ª£ng c·ªßa c√°c qu·ªëc gia t∆∞∆°ng ƒë·ªëi ·ªïn ƒë·ªãnh qua c√°c nƒÉm, nh∆∞ng s·ª± ph·ª• thu·ªôc v√†o nƒÉng l∆∞·ª£ng kh√¥ng t√°i t·∫°o v·∫´n chi·∫øm ∆∞u th·∫ø, ƒë·∫∑c bi·ªát l√† ·ªü c√°c n∆∞·ªõc l·ªõn nh∆∞ M·ªπ, Nga v√† ·∫§n ƒê·ªô. Vi·ªác th√∫c ƒë·∫©y chuy·ªÉn ƒë·ªïi sang nƒÉng l∆∞·ª£ng t√°i t·∫°o v·∫´n c√≤n l√† m·ªôt th√°ch th·ª©c l·ªõn</p></div>
                    ''', unsafe_allow_html=True)
    with col2:
        title =f'L∆Ø·ª¢NG TI√äU TH·ª§ NƒÇNG L∆Ø·ª¢NG C·ª¶A C√ÅC QU·ªêC GIA T·ª™ NƒÇM {selected_years[0]} ƒê·∫æN {selected_years[1]}'
        st.markdown(f'''<div class="custom1">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)

        if selected_countries:
            energy_data = df[(df['Qu·ªëc gia'].isin(selected_countries)) & (df['NƒÉm'] >= selected_years[0]) & (df['NƒÉm'] <= selected_years[1])]
            fig = px.line(energy_data, 
                x='NƒÉm', y='Ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)', 
                color='Qu·ªëc gia', color_discrete_sequence=color_palette,
                markers=True
            )
            layout = get_chart_layout()
            layout.update(
                height=450,
                margin=dict(l=60, r=30, t=30, b=50),
                hovermode='x unified',
            )
            fig.update_layout(
                xaxis_title="NƒÉm",
                yaxis_title="L∆∞·ª£ng ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)",
                **layout,
            )

            fig.update_traces(
                marker=dict(
                    size=6,
                    line=dict(
                        color='black',
                        width=1
                    )
                ),
                line=dict(width=1),
                hovertemplate='L∆∞·ª£ng ti√™u th·ª• nƒÉng l∆∞·ª£ng (Twh): %{y:.1f}<extra></extra>' 
            )
            fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            st.plotly_chart(fig)
    with col3:
        title=f'T·ªà L·ªÜ NƒÇNG L∆Ø·ª¢NG T√ÅI T·∫†O C·ª¶A C√ÅC QU·ªêC GIA NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom1">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)

        if selected_countries:
            filtered_df = df[(df["Qu·ªëc gia"].isin(selected_countries)) & (df['NƒÉm'] == selected_year)]
            filtered_df = filtered_df[['Qu·ªëc gia', 'NƒÉm', 'Ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)','T·ª∑ l·ªá nƒÉng l∆∞·ª£ng t√°i t·∫°o (%)']]
            filtered_df['T·ªâ l·ªá nƒÉng l∆∞·ª£ng kh√¥ng t√°i t·∫°o (%)'] = 100 - df['T·ª∑ l·ªá nƒÉng l∆∞·ª£ng t√°i t·∫°o (%)']

            stacked_df = pd.melt(filtered_df, 
                     id_vars=['Qu·ªëc gia', 'NƒÉm'], 
                     value_vars=['T·ª∑ l·ªá nƒÉng l∆∞·ª£ng t√°i t·∫°o (%)', 'T·ªâ l·ªá nƒÉng l∆∞·ª£ng kh√¥ng t√°i t·∫°o (%)'], 
                     var_name='Lo·∫°i nƒÉng l∆∞·ª£ng', 
                     value_name='Ph·∫ßn trƒÉm')

            # Create a stacked bar chart
            fig_renewable = px.bar(
                stacked_df, 
                x='Qu·ªëc gia', 
                y='Ph·∫ßn trƒÉm', 
                color='Lo·∫°i nƒÉng l∆∞·ª£ng',  # Stack by 'Energy Type' to show renewable and non-renewable
                color_discrete_map={
                    'T·ª∑ l·ªá nƒÉng l∆∞·ª£ng t√°i t·∫°o (%)': '#7daed7',  # LimeGreen for renewable
                    'Non-Renewable Energy Share (%)': '#478dff'  # OrangeRed for non-renewable
                }
            )

            chart_layout = get_chart_layout()
            chart_layout['legend']['title']['text'] = 'Lo·∫°i nƒÉng l∆∞·ª£ng'  

            fig_renewable.update_layout(
                yaxis_title="T·ªâ l·ªá (%)",
                xaxis_title="Qu·ªëc gia",
                **chart_layout,
            )

            st.plotly_chart(fig_renewable)

    # Main tab
    col4, col5, col6 = st.columns([1, 2, 2])
    with col4:
        st.markdown('''<div class="summary2", style="height: 525px;">
                        <h6><center>M√îI TR∆Ø·ªúNG</center></h6>
                        <p>ƒê·ªô che ph·ªß r·ª´ng c·ªßa c√°c n∆∞·ªõc c√≥ xu h∆∞·ªõng gi·ªØ nguy√™n qua c√°c nƒÉm, nh∆∞ng t·∫°i c√°c qu·ªëc gia c√≥ d√¢n s·ªë l·ªõn v√† ti√™u th·ª• nƒÉng l∆∞·ª£ng cao nh∆∞ Trung Qu·ªëc v√† ·∫§n ƒê·ªô, l∆∞·ª£ng ph√°t th·∫£i CO2 v·∫´n ·ªü m·ª©c r·∫•t cao, cho th·∫•y m·ªëi t∆∞∆°ng quan r√µ r·ªát gi·ªØa tƒÉng tr∆∞·ªüng nƒÉng l∆∞·ª£ng v√† t√°c ƒë·ªông ƒë·∫øn m√¥i tr∆∞·ªùng. ƒê·∫∑c bi·ªát l√† Trung Qu·ªëc, n∆∞·ªõc ƒëang ph√°t tri·ªÉn l·ªõn nh·∫•t th·∫ø gi·ªõi, v·ªõi t·ªâ l·ªá bao che ph·ªß r·ª´ng th·∫•p nh∆∞ng l∆∞·ª£ng ph√°t th·∫£i kh√≠ CO2 r·∫•t l·ªõn </p></div>
                    ''', unsafe_allow_html=True)
    with col5:
        title = f'ƒê·ªò CHE PH·ª¶ R·ª™NG C·ª¶A C√ÅC QU·ªêC GIA T·ª™ NƒÇM {selected_years[0]} ƒê·∫æN {selected_years[1]}'
        st.markdown(f'''<div class="custom2">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)

        if selected_countries:
            df_forest = df[df["Qu·ªëc gia"].isin(selected_countries) & (df["NƒÉm"] >= selected_year_range[0]) & (df["NƒÉm"] <= selected_year_range[1])]

            fig_forest = px.line(
                df_forest,
                x="NƒÉm", 
                y="Di·ªán t√≠ch r·ª´ng che ph·ªß (%)",
                color="Qu·ªëc gia",
                color_discrete_sequence=color_palette,
                markers=True
            )

            fig_forest.update_layout(
                xaxis_title="NƒÉm",
                yaxis_title="ƒê·ªô che ph·ªß r·ª´ng (%)",
                **get_chart_layout(),
            )
            fig_forest.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            st.plotly_chart(fig_forest)
    with col6:
        title = f'BI·ªÇU ƒê·ªí TH·ªÇ HI·ªÜN L∆Ø·ª¢NG PH√ÅT TH·∫¢I CO2 V√Ä L∆Ø·ª¢NG TI√äU TH·ª§ NƒÇNG L∆Ø·ª¢NG THEO D√ÇN S·ªê NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom2">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)

        if selected_countries:
            fig_co2_ptr = px.scatter(
                df[(df["Qu·ªëc gia"].isin(selected_countries)) & (df["NƒÉm"] == selected_year)],
                x="Ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)", y="L∆∞·ª£ng ph√°t th·∫£i CO2 (tri·ªáu t·∫•n)",
                size="D√¢n s·ªë (tri·ªáu ng∆∞·ªùi)", color="Qu·ªëc gia", hover_name="Qu·ªëc gia", color_discrete_sequence=color_palette,
                size_max=30  # Control the max size of the bubbles
        )

        fig_co2_ptr.update_layout(
            xaxis_title="L∆∞·ª£ng ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)",
            yaxis_title="L∆∞·ª£ng ph√°t th·∫£i CO2 (tri·ªáu t·∫•n)",
            **get_chart_layout(),
        )
        layout = get_chart_layout()
        layout.update(
            annotations=[
                dict(
                    xref='paper', yref='paper',
                    x=0.5, y=1.15,  # Position at the top center of the chart
                    showarrow=False,
                    text="K√≠ch th∆∞·ªõc bong b√≥ng bi·ªÉu th·ªã quy m√¥ d√¢n s·ªë c·ªßa c√°c qu·ªëc gia",
                    font=dict(size=16, color="DarkSlateGrey")
                )
            ],
        )

        fig_co2_ptr.update_layout(
            xaxis_title="L∆∞·ª£ng ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)",
            yaxis_title="L∆∞·ª£ng ph√°t th·∫£i CO2 (tri·ªáu t·∫•n)",
            **layout,  # Remove the parentheses here
        )
        fig_co2_ptr.update_traces(
            marker=dict(
                line=dict(width=1, color='DarkSlateGrey')
            )
        )
        fig_co2_ptr.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
        st.plotly_chart(fig_co2_ptr)

    #Main tab
    col7, col8 = st.columns([1, 4])
    with col7:
        st.markdown('''<div class="summary3", style="height: 525px;">
                        <h6><center>C∆† S·ªû H·∫† T·∫¶NG</center></h6>
                        <p>Vi·ªác ƒë·∫ßu t∆∞ v√†o c∆° s·ªü h·∫° t·∫ßng ƒë∆∞·ª£c ch√∫ tr·ªçng ƒë·∫∑c bi·ªát l√† ·ªü c√°c n∆∞·ªõc l·ªõn nh∆∞ng t·ªâ l·ªá s·ª≠ d·ª•ng ph∆∞∆°ng ti·ªán c√¥ng c·ªông l·∫°i ·ªü m·ª©c th·∫•p d·∫´n ƒë·∫øn s·ª± ph√°t th·∫£i CO2 cao.<p></div>
                    ''', unsafe_allow_html=True)
    with col8:
        title = f'CHI·ªÄU D√ÄI M·∫†NG L∆Ø·ªöI ƒê∆Ø·ªúNG B·ªò V√Ä T·ªà L·ªÜ S·ª¨ D·ª§NG PH∆Ø∆†NG TI·ªÜN C√îNG C·ªòNG THEO L∆Ø·ª¢NG PH√ÅT TH·∫¢I CO2 NƒÇM {selected_year}'
        st.markdown(f'''<div class="custom3">
                    <center><strong>{title}</strong></center>
                    </div>
                    ''', unsafe_allow_html=True)
        if selected_countries:
            df_filtered = df[(df["Qu·ªëc gia"].isin(selected_countries)) & (df['NƒÉm'] == selected_year)]
            
            # Plot the merged infrastructure chart
            fig_infra = px.scatter(df_filtered, 
                                    x="Chi·ªÅu d√†i m·∫°ng l∆∞·ªõi ƒë∆∞·ªùng b·ªô (km)",  # Road network length
                                    y="S·ª≠ d·ª•ng ph∆∞∆°ng ti·ªán c√¥ng c·ªông (%)",  # Number of airports
                                    size="L∆∞·ª£ng ph√°t th·∫£i CO2 (tri·ªáu t·∫•n)",  # CO2 emissions
                                    color="Qu·ªëc gia",  # Countries
                                    hover_name="Qu·ªëc gia",  # Hover data
                                    title="M·∫°ng l∆∞·ªõi ƒë∆∞·ªùng b·ªô v√† S·ªë l∆∞·ª£ng s√¢n bay v·ªõi l∆∞·ª£ng ph√°t th·∫£i CO2",
                                    color_discrete_sequence=color_palette,
                                    size_max=50
                                )

            layout = get_chart_layout()
            layout.update(
                annotations=[
                    dict(
                        xref='paper', yref='paper',
                        x=0.5, y=1.15,  # Position at the top center of the chart
                        showarrow=False,
                        text="K√≠ch th∆∞·ªõc bong b√≥ng bi·ªÉu th·ªã l∆∞·ª£ng ph√°t th·∫£i CO2 c·ªßa c√°c qu·ªëc gia",
                        font=dict(size=16, color="DarkSlateGrey")
                    )
                ]
            )

            fig_co2_ptr.update_layout(
                xaxis_title="L∆∞·ª£ng ti√™u th·ª• nƒÉng l∆∞·ª£ng (TWh)",
                yaxis_title="L∆∞·ª£ng ph√°t th·∫£i CO2 (tri·ªáu t·∫•n)",
                **layout,  # Remove the parentheses here
            )
            # Customize chart layout
            fig_infra.update_layout(
                xaxis_title="Chi·ªÅu d√†i m·∫°ng l∆∞·ªõi ƒë∆∞·ªùng b·ªô",  
                yaxis_title="T·ªâ l·ªá s·ª≠ d·ª•ng ph∆∞∆°ng ti·ªán c√¥ng c·ªông (%)",
                **layout,
            )

            fig_infra.update_traces(
                marker=dict(
                    line=dict(width=1, color='DarkSlateGrey')
                )
            )
            fig_infra.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            st.plotly_chart(fig_infra)        
